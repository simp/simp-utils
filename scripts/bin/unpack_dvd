#!/opt/puppetlabs/puppet/bin/ruby

#
# This script unpacks files from an ISO image or a DVD:
#
#   * RPM files unpack under /var/www/yum/ and create yum repositories
#   * PXE images unpack into the relevant simp rsync directories for tftpboot
#
# By default, the script only unpacks RPMs and creates yum repos.
#
#   * To unpack PXE tftpboot files, run with `--unpack-pxe`
#   * To disable unpacking RPMs/yum repos, run with `--no-unpack-yum`
#   * Run with `--help` to see more options
#
# The script uses the `isoinfo` utility to pull files off of the DVD, so no root
# access is requried for locally unpacking an ISO.
#
# The ISO's `.treeinfo` file is used to find the OS family, version, and arch.
#
# When unpacking RPMs:
#
#  * The script creates the relevant OS directory  (i.e., `RedHat/7.5/x86_64/`)
#    and a`SIMP` directory with the relevant OS information (i.e., `SIMP/RedHat/7.5/x86_64/`)
#    under the yum directory root.
#
#  * Any files under the `SIMP/` directory on the ISO are unpacked to the local
#    `SIMP/` directory; all other files are unpacked under the OS directory.
#
#  * The OS repo will be created under an Updates/ directory.  Any RPM files
#    found under any directory unpacked under the OS directory will be linked
#    and included in the repo.
#
#  * The ownership of the files is changed to `root:apache` if the script is run
#    as root.
#
#
# When unpacking PXE boot files (disabled by default; use `--unpack-pxe`):
#
#   * The script unpacks files on the ISO under `/images/pxeboot/` into the
#     relevant `/var/simp/../rsync/../tftpboot/linux-install/` location on the
#     local filesystem.
#
#  * If the script is run as root, the ownership of the PXE boot files are
#    changed to `root:nobody` and the SELinux context is copied from the base
#    directory (e.g., `tftpboot/linux-install`)
#

require 'optparse'
require 'fileutils'
require 'find'
require 'open3'
require 'shellwords'
require 'find'
require 'yaml'

File.umask(0022)

# This class shamelessly borrowed from
# http://www.software-testing.com.au/blog/2010/01/13/text-based-progress-bar-in-ruby-for-command-line-programs/
class ProgressBar

  attr_accessor :items_to_do, :items_done

  def initialize(items_to_do, items_done=0)
    reset(items_to_do, items_done)
  end

  def percent_complete
    return (@items_complete*1.0/@items_to_do*1.0)*100
  end

  def advance(steps_to_advance=1)
    @items_complete+=steps_to_advance
  end

  def reset(items_to_do, items_done=0)
    @items_to_do=items_to_do
    @items_complete=items_done
  end

  def report
    $stdout.print "\r#{progress_bar} #{@items_complete} of #{@items_to_do} done"
  end

  def percent_report
    $stdout.print "\r#{progress_bar} #{percent_complete.round}%"
  end

  def progress_bar
    complete_bar=(percent_complete/2.0).floor
    incomplete_bar=((100-percent_complete)/2.0).ceil
    return "[#{"*"*complete_bar}#{"-"*incomplete_bar}]"
  end
end

def bnr
  ('='*4) + ' '
end

# Extract the .treeinfo file from the disc and parse out the relevant values.
#
# FIXME: This should really parse as an .ini instead of naively grepping lines.
def parse_treeinfo_into_discattrs(text)
  discattrs = {}
  text.each_line do |line|
    if line =~ /^family = (.*)$/
        fam = $1.chomp
        if fam.chomp =~ /CentOS/
          discattrs[:family] = "CentOS"
        elsif fam.chomp =~ /Red Hat|RHEL|RedHat/
          discattrs[:family] = "RedHat"
        end
    elsif line =~ /^version = (.*)$/
      discattrs[:version] = $1.chomp
    elsif line =~ /^arch = (.*)$/
      discattrs[:arch] = $1.chomp
    end
  end
  discattrs
end


def update_yum_repo(repo, group)
  repo_dirs = [ repo ]

  puts "Updating repo at #{repo}"
  FileUtils.mkdir_p(repo, mode: 0o755)
  Dir.chdir(repo) do
    discovered_repos = Dir.glob(File.join('..', '**', 'repomd.xml'))
    discovered_repos.map! do |x|
      x.split(File::SEPARATOR)[0...2].join(File::SEPARATOR)
    end

    # Add RPM-only directories
    rpm_only_dirs = Dir.glob(File.join('..', '**', '*.rpm')).map{|x| File.split(x).first}.uniq
    rpm_only_dirs.delete_if{|x| discovered_repos.find{|y| x =~ %r{^#{Regexp.escape(y)}}}}
    discovered_repos += rpm_only_dirs

    discovered_repos.delete_if{|x| File.basename(x) == File.basename(repo)}

    discovered_modular_repos = Dir.glob(File.join('..', '**', 'repodata', '*module*'))
    discovered_modular_repos.map! do |x|
      x.split(File::SEPARATOR)[0...2].join(File::SEPARATOR)
    end

    (discovered_repos - discovered_modular_repos).each do |path|
      Dir.glob(File.join(path, '**', '*.rpm')) do |rpm_file|
        next if File.symlink?(File.basename(rpm_file))

        full_path = File.dirname(File.expand_path(rpm_file))

        FileUtils.ln_sf(rpm_file, File.basename(rpm_file))
        repo_dirs << full_path unless repo_dirs.include?(full_path)
      end
    end

    # This code is hideous.
    # It parses the output of the createrepo command and then reprints it as a
    # percentage so that the user knows that something is happening. Without
    # this, it simply sits there and looks like it has hung.
    buffer = ''
    first = true
    IO.popen("createrepo -p --update .").each_byte do |b|
      b = b.chr
      if b == "\r" or b == "\n"
        next if buffer =~ /^\s*$/

        if buffer =~ /(\d+)\/(\d+).*\.rpm/
          print "\r#{((($1.to_f/$2.to_f) * 100) * 100).round.to_f / 100}% Complete"
        else
          if first
            puts ''
            first = false
          end
          puts buffer
        end
        buffer = ''
      else
        buffer << b
      end
    end
  end

  if Process.uid == 0
    repo_dirs.each  { |dir|
      begin
          FileUtils.chown_R('root',group, dir)
      rescue Exception => e
        $stderr.puts("WARNING: Could not change permissions on #{dir} to root:#{group}.")
        $stderr.puts(e)
      end

      begin
        FileUtils.chmod_R('g+rX',dir)
      rescue Exception => e
        $stderr.puts("WARNING: Could not change permissions on #{dir} to 'g+rX'.")
        $stderr.puts(e)
      end
      begin
        FileUtils.chmod('g+s',dir)
      rescue Exception => e
        $stderr.puts("WARNING: Could not set group id permission on #{dir} 'g+s'.")
        $stderr.puts(e)
      end
    }
  end
end

def sort_noarch(dir, arch)
# dir = directory you are searching
# arch = the architecture of the machine
#
#  This module sorts the noarch RPMs into the noarch
#  directory.
#
  noarchdir = File.expand_path("../noarch", dir )
  FileUtils.mkdir_p(noarchdir, mode: 0o755)
  Dir.chdir(dir) do
    Dir.glob('*.rpm').each do |rpmfile|
      next if File.symlink?(rpmfile)
      rpmarch = rpmfile.split('.')[-2]
      unless [ arch, 'noarch'].include?(rpmarch)
         rpmarch = `rpm -qp #{rpmfile} --queryformat '%{ARCH}' 2> /dev/null`
      end
      FileUtils.mv(rpmfile, noarchdir, :force => true) if rpmarch.eql? 'noarch'
    end
  end
end

def get_iso_toc(isoinfo)
  iso_list = %x{#{isoinfo} -Rl}.split("\n")

  iso_toc = []
  current_dir = nil
  iso_list.each do |line|
    if line =~ /Directory listing of (.*)/
      current_dir = $1.strip
      next
    end

    if (line !~ /->/) and (line =~ /^\S{10}\s/)
      file = line.split.last.strip
      next if file =~ /^\/?\.+$/
      iso_toc << "#{current_dir + file}"
    end
  end
  iso_toc
end

def create_major_os_version_symlink(target_basedir, versiondir, maj_versiondir)
  FileUtils.mkdir_p(target_basedir, mode: 0o755)

  Dir.chdir(target_basedir) do
    if maj_versiondir != versiondir
      from = versiondir
      to   = maj_versiondir

      if File.exist?(from)
        puts "Linking #{from} to #{to} in '#{target_basedir}'"

        FileUtils.rm(to) if File.symlink?(to)
        FileUtils.ln_sf(from, to) unless File.directory?(to)
      end
    end
  end
end

def unpack_and_create_yum_repo_from_iso(discattrs, versiondir, isoinfo, options)
  puts "Unpacking RPM packages from #{discattrs[:path]}...", ''

  # Bail if we're trying to unpack into an old-format directory
  legacy_repodata = Dir.glob(File.join(options[:dest],'SIMP','*','repodata'))
  unless legacy_repodata.empty?
    # Old SIMP layout will have one directory with repodata (<dest>/SIMP/x86_64).
    puts "ERROR: '#{File.dirname(legacy_repodata.first)}' is in the legacy SIMP repo layout!"
    puts '  * Please see the documentation on migrating to the new layout and try again'
    puts '  * Hint: The new layout places the directories under OS-specific subdirectories'

    exit 1
  end

  iso_toc         = get_iso_toc(isoinfo)
  kill_dirs       = iso_toc.map{ |x| File.dirname( x ) }.uniq
  iso_toc         = iso_toc - kill_dirs
  distdir         = File.join(
    options[:dest],
    discattrs[:family],
    versiondir,
    discattrs[:arch],
    ''
  )
  simpdir         = File.join(
    options[:dest],
    'SIMP',
    discattrs[:family],
    versiondir,
    discattrs[:arch],
    ''
  )
  simp_old_iso = true

  progress  = ProgressBar.new(iso_toc.size)

  skip_list = [
    'TRANS.TBL'
  ]

  iso_toc.each do |iso_entry|
    unless skip_list.include?(File.split(iso_entry).last)
      # SIMP 6.6.0 EL8+
      if iso_entry =~ %r{^/SimpRepos/(.+)}
        target = File.join(simpdir, $1)
        simp_old_iso = false
      elsif iso_entry =~ %r{^/SIMP/}
        target = "#{simpdir}#{File.basename(iso_entry)}"
      else
        target = "#{distdir}#{iso_entry}"
      end

      begin
        FileUtils.mkdir_p(File.dirname(target))
      rescue Exception => e
        warn "#{e.class}: #{e.message}"
        puts "This is iso_toc: #{iso_entry}"
        puts "This is the target: #{target}"
        puts "This is the target dirname: #{File.dirname(target)}"
      end

      if !File.exist?(target) || File.stat(target).size.zero?
        system("#{isoinfo} -R -x #{iso_entry} > #{target}")
      end

      # Remove size 0 files because they may actually be directories to hold other
      # files and are not really useful in general
      FileUtils.rm_f(target) if File.stat(target).size.zero?
    end

    progress.advance
    progress.report
  end

  puts ''
  puts 'Unpacking files complete'
  puts 'Updating yum repositories....'

  if simp_old_iso
    if File.directory?(simpdir)
      sort_noarch(simpdir,discattrs[:arch] )
      update_yum_repo(simpdir, options[:group]) unless (simpdir == distdir)
    end
  end

  update_yum_repo("#{distdir}/Updates", options[:group])
  puts "Yum repo creation complete"

  if options[:create_major_os_symlink]
    maj_versiondir = discattrs[:version].split('.').first
    # create major link for OS repository
    target_basedir = File.join(options[:dest], discattrs[:family])
    create_major_os_version_symlink(target_basedir, versiondir, maj_versiondir)
    # create major link for SIMP repository
    target_basedir = File.join(options[:dest],'SIMP',discattrs[:family])
    create_major_os_version_symlink(target_basedir, versiondir, maj_versiondir)
  end

  puts "Unpacking of #{discattrs[:path]} complete!"
end

def unpack_pxeboot_from_iso(discattrs, versiondir, isoinfo, options)
  if options[:actions][:unpack_pxeboot].is_a?(String)
    linux_install_path = options[:actions][:unpack_pxeboot]
  else
    linux_install_path = File.expand_path(
      "#{options[:var_simp]}/environments/#{options[:environment]}" +
        "/rsync/#{discattrs[:family]}/Global/tftpboot/linux-install"
    )
  end

  if options[:verbose]
    puts "#{bnr}linux_install_path: #{linux_install_path}"
  end

  unless File.directory?(linux_install_path)
    fail("ERROR: pxeboot unpack dest directory not found: '#{linux_install_path}'")
  end

  iso_toc = get_iso_toc(isoinfo)

  pxe_dest_version = "#{discattrs[:family].downcase}-#{versiondir}-#{discattrs[:arch]}"
  pxe_dest_dir = File.join(linux_install_path, pxe_dest_version)
  FileUtils.mkdir_p(pxe_dest_dir, mode: 0o750, verbose: options[:verbose])

  iso_pxeboot_images_dir = '/images/pxeboot'
  iso_pxeboot_images = iso_toc.grep(
    %r[^#{iso_pxeboot_images_dir}]
  ).reject{|x| x == iso_pxeboot_images_dir}

  if options[:verbose]
    puts "#{bnr}iso_toc files under /images/pxeboot (#{iso_pxeboot_images.size}):",
      iso_pxeboot_images.to_yaml, ''
  end

  if iso_pxeboot_images.size > 0
    puts "Unpacking PXE boot image files..."
  else
    puts "WARNING: No PXE boot files found on ISO under #{iso_pxeboot_images_dir}"
  end
  iso_pxeboot_images.each do |image|
    image_file = Shellwords.escape(File.basename(image))
    dest_file = File.join(pxe_dest_dir,image_file)

    # Just in case there are subdirectories (haven't run across any yet)
    image_dir = File.dirname(image).sub(%r[^#{iso_pxeboot_images_dir}], '')
    unless image_dir.empty?
      newdir = File.expand_path(image_dir,pxe_dest_dir)
      FileUtils.mkdir_p(newdir, mode: 0o750, verbose: options[:verbose])
      dest_file = File.join(newdir,image_file)
    end

    if options[:verbose]
      puts "    #{image} -> #{dest_file}"
    end
    cmd = "#{isoinfo} -R -x #{image} > '#{dest_file}'"
    system(cmd)
  end

  if Process.uid == 0
    # set ownership + file permissions for tftpboot
    puts "Setting PXE boot files ownership and SELinux context..."
    FileUtils.chown_R('root', 'nobody', pxe_dest_dir, verbose: options[:verbose])
    system("chcon --reference '#{linux_install_path}' -R '#{pxe_dest_dir}'")
  end

  if options[:create_major_os_symlink]
    maj_versiondir = "#{discattrs[:family].downcase}-#{discattrs[:version].split('.').first}-#{discattrs[:arch]}"
    create_major_os_version_symlink(linux_install_path, pxe_dest_version, maj_versiondir)
  end

  puts "Unpacking PXE boot image files complete."
end

def fail_on_unspecific_versiondir(versiondir, options, discattrs)
  if versiondir.split('.').size <= 1
    if options[:version] == versiondir
       warn <<~MSG
         WARNING: unspecific versioned directory name ('#{versiondir}'),
                 (Allowing because it was passed in by option)

       MSG
       return
    end

    puts <<~MSG
  ERROR:

  The versioned directory name ('#{versiondir}') this script is configured to unpack into
  is not specific enough to be safe; if used, this ISO\'s data may overwrite/be
  overwritten by other unpacked ISOs.

  Specific release versions must contain at least one dot (.) character.

  The version '#{versiondir}' may have been automatically determined from the ISO\'s
  metadata; some OS distributions (CentOS) only provide the major OS release
  version in their ISOs\' metadata.

  WORKAROUND:

  Run this script again with `-v` and specify a more specific version.  For
  instance, when unpacking  ISO CentOS-7-x86_64-DVD-2003.iso, you could run:

     unpack_dvd -v 7.0.2003 CentOS-7-x86_64-DVD-2003.iso

  This would use '7.0.2003' as the specific versioned directory name to unpack
  into, and point the major release directory name '7' to  '7.0.2003'
  (auto-linking can be disabled with `-n`).

  MSG
    exit 1
  end
end

# Set defaults
options = {
  verbose: false,
  var_simp: File.directory?('/var/simp') ? '/var/simp' :
    (File.directory?('/srv/simp') ? '/srv/simp' : nil ),
  create_major_os_symlink:  true,
  group: 'apache',
  dest:  File.directory?('/var/www/yum') ? '/var/www/yum' :
    (File.directory?('/srv/www/yum') ? '/srv/www/yum' : nil),
  environment: 'production',
  actions: {
    unpack_yum_repo: true,
    unpack_pxeboot:  false,
  }
}

# Get command line options
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] /path/to/dvd/to/unpack"

  opts.separator ''
  opts.separator 'Basic unpack options:'
  opts.separator ''

  opts.on("-v", "--version VERSION",
    "Override OS version from the ISO's .treeinfo",
    "  file (which is often just the major OS",
    "  version, and not specific enough to",
    "  prevent overwriting directories from",
    "  previously unpacked ISOs from the same ",
    "  major OS version."
    ) do |version|
    options[:version] = version.chomp
  end

  opts.separator 'RPM/yum repo unpack options:'
  opts.separator ''

  opts.on("-Y", "--[no-]unpack-yum",
    "unpack RPMs from DVD and create yum repo",
    "  (default: #{options[:actions][:unpack_yum_repo]})",
  ) do |n|
    options[:actions][:unpack_yum_repo] = n
  end

  opts.on("-d", "--dest DIR",
    "Set the yum repo target directory",
    "  (Default: #{options[:dest]})",
    "  The <OS>/<ver>/<arch> directories will be",
    "  created under here.") do |dest|
    options[:dest] = dest.chomp
  end

  opts.on("-n", "--[no-]nolink",
    "Do not symlink the unpacked OS yum repo to",
    "  serve as the OS's major version repo."
    ) do |n|
    options[:create_major_os_symlink] = !n
  end

  opts.on("-g", "--group GROUP", String,
    "Specify group ownership of unpacked packages",
    "  (Default: '#{options[:group]}')",
    "  Note: This option does not verify that",
    "        GROUP actually exists!"
    ) do |group|
    options[:group] = group
  end

  opts.separator 'PXE tftpboot unpack options:'
  opts.separator ''

  opts.on("-X", "--[no-]unpack-pxe [DIR]", String,
    "unpack pxeboot tftpboot files from iso",
    "  (default: #{options[:actions][:unpack_pxeboot]})",
    "  May optionally specify an alternate",
    "  target directory for `linux-install/`"
  ) do |pxeboot|
    pxeboot = true if (!pxeboot.is_a?(FalseClass) && pxeboot.to_s.empty?)
    if pxeboot.is_a?(String)
      pxeboot.chomp!
      fail("ERROR: pxeboot directory '#{pxeboot}' does not exist") unless File.directory?(pxeboot)
    end
    options[:actions][:unpack_pxeboot] = pxeboot
  end

  opts.on("-e", "--environment ENVIRONMENT", %r[\A[a-z0-9_]+\Z],
    "Set target SIMP environment (used by -X)",
    "  (Default: #{options[:environment]}"
  ) do |env|
    options[:environment] = env.chomp
  end

  opts.separator 'Global options:'
  opts.separator ''

  opts.on("-V", "--[no-]verbose",
    "Add verbose output (default: #{options[:verbose]}"
  ) do |n|
    options[:verbose] = n
  end


  opts.on("-h", "--help", "Output this useful help message") do
    puts opts
    exit
  end
end

opt_parser.parse!

# Option checking
fail("ERROR: You must specify an ISO to unpack") if (ARGV.length < 1)
fail("ERROR: Could not detect a package destination directory, and no --dest option provided") unless options[:dest]
fail("ERROR: Destination directory '#{options[:dest]}' does not exist") unless File.directory?(options[:dest])

# Set nice names for options

discattrs = {
  :family => nil,
  :version => nil,
  :arch => nil,
  :path => nil
}

discattrs[:path] = ARGV.first
if not File.readable?(discattrs[:path])
  $stderr.puts("ERROR: Could not read file #{discattrs[:path]}")
  exit 1
end

if File.directory?(discattrs[:path])
  $stderr.puts("ERROR: #{discattrs[:path]} is a directory...")
  exit 1
end

isoinfo = "isoinfo -i #{discattrs[:path]}"
if File.blockdev?(discattrs[:path])
  isoinfo = "isoinfo dev=#{discattrs[:path]}"
end

discattrs.merge!(parse_treeinfo_into_discattrs(%x{#{isoinfo} -R -x /.treeinfo}))

# If everything isn't filled, die a slow death.
discattrs.each_pair do |k,v|
  if v.nil?
    $stderr.puts("ERROR: Was not able to find the value for #{k} in the DVD .treeinfo file.")
    exit 1
  end
end

# Use the version in .treeinfo if no version has been specified"
versiondir = options[:version] || discattrs[:version]

puts "Unpacking ISO as '#{discattrs[:family]}' version '#{versiondir}'"

if options[:verbose]
  puts bnr + 'options:', options.to_yaml, ''
  puts bnr + 'discattrs:', discattrs.to_yaml, ''
  puts bnr + "versiondir: #{versiondir}", ''
end

fail_on_unspecific_versiondir(versiondir,options,discattrs)

if options[:actions][:unpack_yum_repo]
  unpack_and_create_yum_repo_from_iso(discattrs, versiondir, isoinfo, options)
else
  puts
  puts '!! Skipping RPM unpack + YUM repo creation'
  puts '   (run with `--unpack-yum` to enable)', ''
end

if options[:actions][:unpack_pxeboot]
  unpack_pxeboot_from_iso(discattrs, versiondir, isoinfo, options)
else
  puts
  puts '!! Skipping pxeboot unpack for tftpboot'
  puts '   (run with `--unpack-pxe` to enable)', ''
end

exit
