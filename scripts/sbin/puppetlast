#!/opt/puppetlabs/puppet/bin/ruby
#
# puppetlast queries PuppetDB and returns a list of nodes and the last time the
# catalog was compiled

require 'uri'
require 'date'
require 'puppet'
require 'facter'
require 'ostruct'
require 'optparse'
require 'net/http'

class PuppetLast

  def parse_options(args)
    @options = OpenStruct.new
    @options.detailed     = false
    @options.expiration   = 5
    @options.outtime      = ''
    @options.port         = 8138
    @options.statuses     = []
    @options.hosts        = []
    @options.environments = []
    @options.pretty       = false
    @options.sort_by      = :certname
    # This currently isn't settable...
    @options.round_to     = '.02'

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename(__FILE__)} [options]"

      opts.separator ""

      opts.summary_width = 26
      opts.summary_indent = '  '

      opts.on(
        "-d",
        "--detailed",
        "Show environment and last run status information"
      ) do |detailed|
        @options.detailed = detailed
      end

      opts.on(
        "-e",
        "--expiration NUM",
        Float,
         "Don't show systems that have not checked in for more than NUM days."
      ) do |exp|
        if exp == 0 then
          @options.expiration = 99999
        else
          @options.expiration = exp.to_f.abs
        end
      end

      opts.on(
        "-P",
        "--port",
        Array,
        "The port that PuppetDB is listening on"
      ) do |port|
        @options.port = port
      end

      opts.on(
        "-S",
        "--status a,b,c",
        ['failed', 'changed', 'unchanged'],
        "Return only nodes with statuses: 'failed', 'changed', or 'unchanged'"
      ) do |statuses|
        @options.statuses = statuses
      end

      opts.on(
        "-H",
        "--hosts a,b,c",
        Array,
        "List of hosts (short or long) that you wish to get data on"
      ) do |hosts|
        @options.hosts = hosts
      end

      opts.on(
        "-E",
        "--environments a,b,c",
        Array,
        "List of environments you want to get data from"
      ) do |environments|
        @options.environments = environments
      end

      opts.on(
        "-s",
        "--sort-by SORT_OPTION",
        [:nil, :certname, :time, :status, :environments],
        "Sort by a given attribute: 'nil' => unsorted, 'certname' => default, 'time' => last checkin, 'status' => last run status, 'environments' => node environment"
      ) do |sort_by|
        @options.sort_by = sort_by
      end

      opts.on(
        "-t",
        "--timeformat TF",
        [:seconds, :minutes, :hours, :days],
        "Select output time format (seconds, minutes, hours, days)"
      ) do |tf|
        @options.outtime = tf
      end

      opts.on(
        "-p",
        "--pretty",
        "Format the output more attractively."
      ) do |pretty|
        @options.pretty = pretty
      end

      opts.on(
        "-h",
        "--help",
        "Help Message"
      ) do
        puts opts
        @options.help_requested = true
      end
    end

    begin
      opts.parse!(args)
    rescue OptionParser::ParseError => e
      raise "ERROR #{e.message}\n#{opts.to_s}"
    end

    case @options.outtime.to_s
      when /^s.*/ then
        @options.outtime = 'seconds'
        @options.divisor = 1
      when /^h.*/ then
        @options.outtime = 'hours'
        @options.divisor = 1/Float(3600)
      when /^d.*/ then
        @options.outtime = 'days'
        @options.divisor = 1/Float(86400)
      else
        @options.outtime = 'minutes'
        @options.divisor = 1/Float(60)
    end

    @options.expsecs = @options.expiration * 86400
  end

  # grabs info about a particular host from PuppetDB
  def query_host(certname, port)
    # TODO move to ssl
    uri = URI("http://localhost:#{port}/pdb/query/v4/nodes/#{certname}")

    begin
      data = JSON.parse(Net::HTTP.get(uri), :symbolize_names => true)
    rescue Exception => e
      err_msg = "ERROR: #{e}\n" +
                "  Please make sure PuppetDB is running, this script is being run from\n" +
                "  the PuppetDB host, and the port is correct"
      raise err_msg
    end

    if data.keys.include? :error then
      err_msg = "ERROR: Could not retrieve node data for #{certname}" +
                "  Server Said: #{data}"
      raise err_msg
    end

    data
  end

  # grabs info about all hosts in PuppetDB
  def query_hosts(port)
    # TODO move to ssl
    uri = URI("http://localhost:#{port}/pdb/query/v4/nodes")

    begin
      data = JSON.parse(Net::HTTP.get(uri), :symbolize_names => true)
    rescue Exception => e
      err_msg = "ERROR: #{e}\n" +
                "  Please make sure PuppetDB is running, this script is being run from\n" +
                "  the PuppetDB host, and the port is correct"
      raise err_msg
    end

    data
  end

  # take the PuppetDB scehema and transform it into useful info for us
  def transform_hosts(hosts)
    node_data = []

    hosts.each do |host|
      last_checkin = Time.now - Time.parse(host[:catalog_timestamp])
      node_data << {
        :last_checkin => last_checkin,
        :expired      => host[:expired].nil? ? false : host[:expired],
        :certname     => host[:certname],
        :environment  => host[:catalog_environment].nil? ? 'N/A' : host[:catalog_environment],
        :status       => host[:latest_report_status].nil? ? 'N/A' : host[:latest_report_status],
        :formatted_checkin => sprintf("%#{@options.round_to}f",(last_checkin * @options.divisor).abs),
      }
    end

    if not @options.environments.empty?
      node_data.delete_if {|node| not @options.environments.include? node[:environment] }
    end
    if not @options.statuses.empty?
      node_data.delete_if {|node| not @options.statuses.include? node[:status] }
    end

    node_data
  end

  # sort hosts list according to the option
  def sort_hosts(hosts,sort_by)
    case sort_by
    when :certname
      return hosts.sort{ |a,b| a[:certname] <=> b[:certname] }
    when :time
      return hosts.sort{ |a,b| a[:last_checkin] <=> b[:last_checkin] }
    when :status
      return hosts.sort{ |a,b| a[:status] <=> b[:status] }
    when :environment
      return hosts.sort{ |a,b| a[:environment] <=> b[:environment] }
    else
      return hosts
    end
  end

  # find max length of element and return it
  def find_longest(sorted_data, key)
    keys = sorted_data.map { |h| h[key].to_s }
    return keys.max_by(&:length).length
  end

  def main(args)
    parse_options(args)
    return 0 if @options.help_requested

    hostlist = []
    if @options.hosts.empty? then
      hostlist = query_hosts( @options.port )
    else
      @options.hosts.each do |host|
        hostlist << query_host( host, @options.port )
      end
    end

    node_data = transform_hosts( hostlist )
    return 1 if node_data.size == 0

    sorted_data = sort_hosts( node_data,@options.sort_by )

    col_len = { :certname=>0, :formatted_checkin=>0, :environment=>0, :status=>0 }
    if @options.pretty
      col_len.keys.each do |col|
        col_len[col] = find_longest(sorted_data, col)
      end
    end

    # ... and the rest of the table
    node_data.each do |node|
      # expired nodes aren't included when returning all nodes from PuppetDB,
      # but users can specify nodes manually
      if not node[:expired] then
        if node[:last_checkin] < 0
          msg = "%-#{col_len[:certname]}s time issue: %#{col_len[:formatted_checkin]}#{@options.round_to}f %s in the future\n"
        else node[:last_checkin] < @options.expsecs
          if @options.detailed
            msg = "%-#{col_len[:certname]}s from environment %-#{col_len[:environment]}s checked in %#{col_len[:formatted_checkin]}#{@options.round_to}f %s ago with status %-#{col_len[:status]}s\n"
          else
            msg = "%-#{col_len[:certname]}s checked in %#{col_len[:formatted_checkin]}#{@options.round_to}f %s ago\n"
          end
        end

        if node[:last_checkin].to_s =~ /e/ then
          puts "#{node[:certname]} outside the bounds of time and space"
        else
          if @options.detailed
            printf(msg,
              node[:certname],
              node[:environment],
              node[:formatted_checkin],
              @options.outtime,
              node[:status]
            )
          else
            printf(msg,
              node[:certname],
              node[:formatted_checkin],
              @options.outtime
            )
          end
        end
      else
        puts "#{node[:certname]} expired"
      end
    end
    return 0
  rescue SignalException =>e
    if e.inspect == 'Interrupt'
      $stderr.puts "\nProcessing interrupted! Exiting."
    else
      $stderr.puts "\nProcess received signal #{e.message}. Exiting!"
      e.backtrace.first(10).each{|l| $stderr.puts l }
    end
    return 1
  rescue RuntimeError =>e
    $stderr.puts(e.message)
    return 1
  rescue => e
    $stderr.puts("\n#{e.message}")
    e.backtrace.first(10).each{|l| $stderr.puts l }
    return 1
  end

end

if __FILE__ == $0
  pl = PuppetLast.new
  exit pl.main(ARGV)
end
