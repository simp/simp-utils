#!/usr/bin/ruby

# This script attempts a clean migration from pre-environment SIMP to the new
# SIMP with Environments.
#
# A backup copy of all original material will be stored in
# /etc/puppet/environments/pre_migration.simp/<date_string>.
#
# A -q argument can be added to make the script silent.

require 'fileutils'
require 'find'

silent = ( ARGV[0] == '-q' )

puppet_dir = '/etc/puppet'
environment_dir = "#{puppet_dir}/environments"
backup_target = "#{environment_dir}/pre_migration.simp/#{Time.now.to_i}"
lock_file = "#{puppet_dir}/.simp_automigrated"
made_git_backup = false

pserver_upgrade = File.join(File.dirname(__FILE__),'upgrade_to_puppetserver')
pserver_exists = system(%{which puppetserver > /dev/null 2>&1})

puts "Starting to upgrade your system to use Environments"
puts "Press Ctrl-C within 5 seconds to abort"
tm=0; while tm < 5 do sleep(1); tm+=1; end

### Upgrade the Puppet Server ###

if File.exist?("#{pserver_upgrade}")
  if not pserver_exists
    puts "Attempting to upgrade your Puppet Master to the new Puppet Server..."
    puts "This may take some time...."
    puts

    upgrade_out = %x{#{pserver_upgrade}}
    puts upgrade_out
  else
    puts "Found an existing puppet server application, not attempting to upgrade."
    puts "If this is in error, please run the #{pserver_upgrade} script by hand"
    sleep(2)
  end
else
  fail "Error: Could not find the puppet server upgrade script at #{pserver_upgrade}"
end

fail "Error: Could not find a working puppet server, please check your repos and try again." unless system(%{which puppetserver > /dev/null 2>&1})

if File.exist?(lock_file) then
  puts "Found a lock file at #{lock_file}" unless silent
  puts "Please back up your current 'simp' environment and remove the lock file if you would like to run the migration again" unless silent
  exit 0
end

### Ensure Sanity ###
# If *any* of these directories is missing, something is very wrong....

required_dirs = ['FakeCA','hieradata','manifests','modules','simp_autofiles']

required_dirs.map{|x| x = "#{environment_dir}/simp/#{x}" }.each do |dir|
  fail "Error: Could not find directory #{dir}. Please check your environment for sanity and try again." unless File.directory?(dir)
end

### Backup the current environment ###

puts "Backing up your current environment to #{backup_target}"
sleep(1)

FileUtils.mkdir_p(backup_target,{:mode => 0750})

begin
  Dir.chdir(backup_target) do
    FileUtils.mkdir('git_repo')
    Dir.chdir('git_repo') do
      system(%{git init --bare 2>&1 > /dev/null})
    end

    Dir.chdir(puppet_dir) do
      if File.exist?('.git')
        FileUtils.mv('.git','.git.simpbak')
        system(%{git add .git.simpbak 2>&1 > /dev/null})
        made_git_backup = true
      end

      system(%{getfacl -R . > #{backup_target}/etc_puppet.facl})

      system(%{git init 2>&1 > /dev/null})
      system(%{git add * 2>&1 > /dev/null})
      system(%{git commit -m 'SIMP Migration Backup at #{Time.now}' 2>&1 >/dev/null})
      system(%{git remote add origin #{backup_target}/git_repo})
      system(%{git push origin master})
    end

    FileUtils.mkdir('backup_data')
    Dir.chdir('backup_data') do
      system(%{git init})
      system(%{git remote add origin ../git_repo})
      system(%{git fetch --all})
      system(%{git checkout master})
    end
  end

  if ( File.directory?("#{puppet_dir}/hieradata") )
    system %{cp -a #{puppet_dir}/hieradata #{environment_dir}/simp}
    FileUtils.rm_rf("#{puppet_dir}/hieradata")

    Find.find("#{environment_dir}/simp/hieradata") do |file|
      next unless File.file?(file)
      if file =~ /\.rpmsave$/ then
        file_dir = File.dirname(file)
        file_base = File.basename(file,'.rpmsave')
        Dir.chdir(file_dir) do
          FileUtils.mv(file_base,"#{file_base}.rpmsave.simp") if File.exist?(file_base)
          FileUtils.mv(file,file_base)
        end
      end
    end
  end

  if ( File.symlink?("#{environment_dir}/production/modules") or
       File.symlink?("#{environment_dir}/production/manifests") ) and not
       File.symlink?("#{environment_dir}/production")
  then

    puts "Migrating existing production environment..."
    sleep(0.5)

    FileUtils.mv("#{environment_dir}/production",backup_target)

    Dir.chdir(environment_dir) do
      FileUtils.ln_s('simp','production')
    end
  else
    puts "Production environment found, not migrating" unless silent
  end

  if File.directory?("#{puppet_dir}/keydist")
    puts "Migrating 'keydist' into the 'pki' module in the 'simp' environment"
    sleep(1)

    system %{cp -a #{puppet_dir}/keydist #{environment_dir}/simp/modules/pki/files}
    FileUtils.rm_rf("#{puppet_dir}/keydist")
  end

  if File.directory?("#{puppet_dir}/helper_scripts")
    FileUtils.rm_rf("#{puppet_dir}/helper_scripts")
  end

  if File.directory?("#{puppet_dir}/facts")
    FileUtils.rm_rf("#{puppet_dir}/facts")
  end

  if File.exist?("#{puppet_dir}/localusers")
    puts "Migrating the 'localusers' file into the 'simp' environment"
    sleep(0.5)

    FileUtils.cp("#{puppet_dir}/localusers","#{environment_dir}/simp",{:preserve => true})
  end
  Dir.glob("#{puppet_dir}/localusers*") do |file|
    FileUtils.rm_rf(file)
  end

  puts "Removing fileserver.conf as it should no longer be used due to environment constraints"
  Dir.glob("#{puppet_dir}/fileserver.conf*") do |file|
    sleep(1)
    FileUtils.rm_rf(file)
  end

  if File.exist?("#{puppet_dir}/manifests")
    puts "Migrating your site.pp.\n    * All other top level manifest files will be ignored but preserved in the backup directory"
    sleep(1)

    if File.exist?("#{puppet_dir}/manifests/site.pp")
      if File.read("#{puppet_dir}/manifests/site.pp") =~ /hiera_include\('classes'\)/
        FileUtils.cp("#{puppet_dir}/manifests/site.pp","#{environment_dir}/simp/manifests",{:preserve => true})
      else
        puts "WARNING: Existing site.pp does not appear to be Hiera compatible. Not migrating"
      end
    end

    FileUtils.rm_rf("#{puppet_dir}/manifests")
  end

  if not File.exist?("#{environment_dir}/simp/simp_autofiles/gen_passwd")
    puts "Migrating your generated passwords into the 'simp' environment under 'simp_autofiles'"
    sleep(0.5)

    if File.exist?("#{puppet_dir}/modules/site/files/gen_passwd")
      system %{cp -a #{puppet_dir}/modules/site/files/gen_passwd #{environment_dir}/simp/simp_autofiles}
      FileUtils.rm_rf("#{puppet_dir}/modules/site/files/gen_passwd")
    end
  end

  if not File.exist?("#{environment_dir}/simp/simp_autofiles/ssh_autokeys")
    puts "Migrating your generated ssh_autokeys into the 'simp' environment under 'simp_autofiles'"
    sleep(0.5)

    if File.exist?("#{puppet_dir}/modules/site/files/sshrsakeys")
      system %{cp -a #{puppet_dir}/modules/site/files/sshrsakeys #{environment_dir}/simp/ssh_autokeys}
      FileUtils.rm_rf("#{puppet_dir}/modules/site/files/sshrsakeys")
    end
  end

  if File.exist?("#{puppet_dir}/modules/site")
    puts "Migrating your site module into the 'simp' environment"
    sleep(0.5)

    system %{cp -a #{puppet_dir}/modules/site #{environment_dir}/simp/modules}
    FileUtils.rm_rf("#{puppet_dir}/modules/site")
  end

  if File.directory?("#{puppet_dir}/modules")
    puts "Migrating all of your non-simp modules into the 'simp' environment"
    sleep(0.5)

    old_modules = Dir.glob("#{puppet_dir}/modules/*").map{|x| x = File.basename(x)}
    new_modules = Dir.glob("#{environment_dir}/simp/modules/*").map{|x| x = File.basename(x)}

    (old_modules - new_modules).each do |mod|
      puts "Migrated....#{mod}"
      sleep(0.3)

      system %{cp -a #{puppet_dir}/modules/#{mod} #{environment_dir}/simp/modules}
      FileUtils.rm_rf(%{#{puppet_dir}/modules/#{mod}})
    end
  end

  puts "Locking the migration script..."
  sleep(1)
  FileUtils.touch(lock_file)
  puts "To run the migration script again, please back up your data and remove #{lock_file}"
  puts
  puts
  puts "*** If all went well, you should now be able to continue using Puppet as usual ***"
  puts
rescue Exception => e
  puts "Error: #{e}"
  puts "Rewinding..."

  Dir.chdir(puppet_dir) do
    puts "Restoring from backup"
    system(%{git reset --hard HEAD})
    system(%{git checkout master})

    if made_git_backup
      if (File.exist?('.git.simpbak'))
        system(%{git reset --hard HEAD})
        system(%{git clean -df})
        FileUtils.rm_rf('.git')
        FileUtils.mv('.git.simpbak','.git')
        system(%{setfacl --restore=#{backup_target}/etc_puppet.facl})
      end
    end
  end
ensure
  if made_git_backup
    Dir.chdir(puppet_dir) do
      if (File.exist?('.git.simpbak'))
        FileUtils.rm_rf('.git')
        FileUtils.mv('.git.simpbak','.git')
        system(%{git add environments})
        system(%{git commit -a -m 'SIMP Upgraded to Environments'})
      end
    end
  end
end
