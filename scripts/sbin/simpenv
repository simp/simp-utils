#! /bin/sh

#  This script is used to create an environment for SIMP 6.4 or later.
#  See ./simpenv --help for more information.
#

function error_msg () {
  echo "ERROR: $1"
  exit 1
}

function create_write_env () {
  local newenvdir="${1}/${2}"
  echo "Creating Writable env dir ${newenvdir}"

  if [[ -d $newenvdir ]]; then
    error_msg "Writable env dir ${newenvdir} already exists"
  fi
  mkdir $newenvdir
  rsync -a "${WRITESKELDIR}/"  $newenvdir
  chown -R $PUPPET_USER:$PUPPET_GROUP $newenvdir
  chmod -R g+rwX $newenvdir
}

function create_secondary_env () {
  local olddir=$(pwd)
  local envdir=$1
  local skeldir=$2
  local rsyncskeldir=$3
  echo "Creating Secondary env dir ${envdir}"

  if [[ -d $envdir ]]; then
    error_msg "Secondary env dir ${envdir} already exists"
  fi
  mkdir $envdir

  # create Fake CA and key dirs
  rsync -a "${skeldir}/" $envdir

  #make sure cacertkey has random data
  dd if=/dev/urandom count=24 bs=1 status=none | openssl enc -a -out "${envdir}/FakeCA/cacertkey"

  # Make sure the permissions and owners are correct.
  puppet_user=$(puppet config print user 2>.dev.null)
  puppet_group=$(puppet config print group 2>.dev.null)
  chmod 755 $envdir 
  chgrp -R $puppet_group $envdir/site_files
  chmod -R g+rX  $envdir/site_files
  chmod -R o-rwX $envdir/site_files
  chmod 750 $envdir/FakeCA

  # copy simp-rsync files
  rsync -a $rsyncskeldir $envdir

  # make sure selinux contexts are good
  fixfiles -F restore $envdir
  # make sure permissions and acls are correct
  cd ${envdir}/rsync
  if [[ -f  .rsync.facl ]]; then
    setfacl --restore=.rsync.facl
  else
    echo "Could not find rsync ACL file.  Permissions on rsync directory may not be correct"
  fi
  chmod 755 $envdir
  cd $olddir
}

function copy_or_link_env () {
  local basedir=$1
  local newenv=$2
  local oldenv=$3
  local operation=$4
  if [[ ! -d "${basedir}/${oldenv}" ]]; then
    error_msg "Old environment ${basedir}/${oldenv} does not exist."
  fi
  if [[ -d "${basedir}/$newenv" ]]; then
    error_msg "New environment ${basedir}/${newenv} exists already"
  fi
  case $operation in
    link )
      echo "Linking ${basedir}/${newenv} to ${basedir}/${oldenv}"
      ln -s "${basedir}/${oldenv}" "${basedir}/${newenv}"
      ;;
    copy )
      echo "Copying ${basedir}/${oldenv} to ${basedir}/${newenv}"
      rsync -a "${basedir}/${oldenv}" "${basedir}/${newenv}"
      ;;
    * )
      error_msg "Invalid operation ${operation}, must be 'link' or 'copy'"
      ;;
  esac
}

function list_env_dirs () {
  echo "-----------------------------------------------------------------------"
  echo "--- Puppet Environment: ${PUPENVDIR} --------------"
  ls -la $PUPENVDIR
  echo "-----------------------------------------------------------------------"
  echo " "
  echo "-----------------------------------------------------------------------"
  echo "--- Secondary Environment: ${ENV2DIR} --------------"
  ls -la $ENV2DIR
  echo "-----------------------------------------------------------------------"
  echo " "
  echo "-----------------------------------------------------------------------"
  echo "--- Writable Environment: ${ENV3DIR} --------------"
  echo
  ls -la $ENV3DIR
  echo "-----------------------------------------------------------------------"
}

function create_puppet_env () {
  local curdir=$(pwd)
  local newenv=$1
  local puppetdir=$2
  local pupskeldir=$3

  newenvdir="${puppetdir}/${newenv}"
  echo "Creating Puppet env dir ${newenvdir} from ${pupskeldir}"

  if [[ -d "${newenvdir}" ]]; then
    error_msg "Puppet environment ${newenvdir} already exists"
  fi

  if [[ ! -d $pupskeldir ]]; then
    error_msg "Puppet environment skeleton dir, ${pupskeldir}, does not exist"
  fi

  mkdir $newenvdir
  rsync -a "${pupskeldir}/" $newenvdir
  cat > ${newenvdir}/environment.conf <<ENVCONF
#Do not remove \$basemodulepath from this.

modulepath = modules:/var/simp/environments/${newenv}/site_files:\$basemodulepath
environment_timeout = 0
ENVCONF
  if [[ ! -f Puppetfile ]]; then
    if [[ -x /bin/simp  || -x /usr/bin/simp ]]; then
      simp puppetfile generate --skeleton > "${newenvdir}/Puppetfile"
    else
      error_msg "Unable to generate Puppetfile: rubygem-simp-cli package is not installed"
    fi
  fi
  if [[ ! -f Puppetfile.simp ]]; then
    if [[ -x /bin/simp  || -x /usr/bin/simp ]]; then
      simp puppetfile generate > "${newenvdir}/Puppetfile.simp"
    else
      error_msg "Unable to generate Puppetfile.simp: rubygem-simp-cli package is not installed"
    fi
  fi
  chown -R root:$PUPPET_GROUP $newenvdir
  chmod -R g+rX $newenvdir
  cd $curdir
}

function usage () {

cat <<EOU
Usage:  This script will create the SIMP environment for a new environment.
  See:  https://simp-project.atlassian.net/wiki/spaces/SD/pages/760840207/Environments
  for information the various parts of an environment.

  There are three parts of the  SIMP environment, Puppet, Secondary, and
  Writable environments, and they can individually be either:
    - created from skeletons provided by SIMP components
    - linked to an existing environment
    - copied from an existing environment

  simpenv -h
  simpenv --list
  simpenv -n|-c|-l|-a [new|copy|link] [EXISTING_ENV] NEWENV
    -n create all parts from the skeleton
         simpenv -n NEWENV

    -l link both parts of the SIMP Extra Environment to an existing environment
       and copy the Puppet Environment from the existing environment
         simpenv -l EXISTING_ENV NEWENV

    -c copy all parts from an existing environment
        simpenv -c EXISTING_ENV NEWENV

    -a create each part using a different method (new, copy, link);
       link is not an option for the Puppet environment
         simpenv -a PUPPET SECONDARY WRITEABLE EXISTING_ENV NEWENV

         For example if you want to create the Puppet and Secondary environment
         but link the Writable environment:
           simpenv -a new new link  myexistingenv mynewenv

    NOTE:  To complete the installation of the environment you must run r10k
    to install the Puppet modules in the new environment.  If there is no
    Puppetfile in the new environment, one will be created containing the
    latest SIMP Puppet module versions currently installed under
    /usr/share/simp, using the 'simp puppetfile generate' command.  The
    'simp' command is provided by the rubygem-simp-cli package.

EOU
}

function bad_usage () {
  usage
  exit 1
}


### Main Program ###
SKELBASE=/usr/share/simp/environment-skeleton
SKELDIR="${SKELBASE}/puppet"
SECSKELDIR="${SKELBASE}/secondary"
WRITESKELDIR="${SKELBASE}/writable"
RSYNCSKELDIR="${SKELBASE}/rsync"
PUPENVDIR=$(puppet config print environmentpath 2> /dev/null)
ENV2DIR="/var/simp/environments"
WRITEBASE=$(puppet config print --section=master vardir 2> /dev/null)
ENV3DIR="${WRITEBASE}/simp/environments"

#initialize variables
oldenv=''
newenv=''

# Set puppet group and user.
PUPPET_USER=$(puppet config print user 2> /dev/null)
PUPPET_GROUP=$(puppet config print group 2> /dev/null)

if [[ -z $PUPPET_USER ]] || [[ -z $PUPPET_GROUP ]]; then
  error_msg "Unable to determine puppet user, ${PUPPET_USER}, or puppet group, ${PUPPET_GROUP}"
fi

#Check that all our base dirs and skeletons exist
for dir in $SKELDIR $PUPENVDIR $RSYNCSKELDIR $SECSKELDIR $WRITEBASE $WRITESKELDIR
do
  if [[  ! -d $dir  || -z $dir  ]]; then
    error_msg "Verification of skeleton directories failed.  Directory, ${dir}, does not exist.  Cannot continue"
  fi
done

# Check that the parent directory tree for the SIMP secondary and writable environments
# exist, and if not create them
if [[ ! -d $ENV3DIR ]]; then
  mkdir -p $ENV3DIR
  chmod 750 "${WRITEBASE}/simp"
  chmod 750 "${WRITEBASE}/simp/environments"
  chown  $PUPPET_USER:$PUPPET_GROUP "${WRITEBASE}/simp"
  chown  $PUPPET_USER:$PUPPET_GROUP "${WRITEBASE}/simp/environments"
fi

if [[ ! -d $ENV2DIR ]]; then
  mkdir -p $ENV2DIR
  chown root:root $ENV2DIR
  chmod 755 $ENV2DIR
fi
## get arguments
case $1 in
  -n )
    if [[ $# -lt 2 ]]; then
      bad_usage;
    fi
    shift
    newenv=$1
    secop='new'
    writeop='new'
    pupenvop='new'
    ;;
  -l | -c )
    if [[ $# -lt 3 ]]; then
      bad_usage;
    fi
    # Always copy the puppet environment
    pupenvop='copy'
    if [[ "$1" == '-c' ]]; then
      secop='copy'
      writeop='copy'
    else
      secop='link'
      writeop='link'
    fi
    shift
    oldenv=$1
    shift
    newenv=$1
    shift
    ;;
  -a )
    if [[ $# -lt 5 ]]; then
      bad_usage
    fi
    shift
    case $1 in
      new | copy )
        pupenvop=$1
        ;;
      * )
        bad_usage
        ;;
    esac
    shift
    case $1 in
      new | link | copy )
        secop=$1
        ;;
      * )
        bad_usage
        ;;
    esac
    shift
    case $1 in
      new | link | copy )
        writeop=$1
        ;;
      * )
        bad_usage
        ;;
    esac
    shift
    oldenv=$1
    shift
    newenv=$1
    ;;
  --list)
    list_env_dirs
    exit $?
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  * )
    bad_usage
    ;;
esac

# Make sure a new environment was passed
if [[ -z $newenv ]]; then
  error_msg "Did not specify new existing environment name"
fi

basedir=$PUPENVDIR
case $pupenvop in
  new)
    create_puppet_env $newenv $basedir $SKELDIR
    ;;
  copy)
    if [[ -z $oldenv ]]; then
      error_msg "Did not specify copy environment name"
    fi
    create_puppet_env $newenv $basedir "${basedir}/${oldenv}"
    ;;
  *)
    error_msg "Invalid operation, ${pupenvop}, for ${basedir} environment"
    ;;
esac

#Perform Ops on Environment 2
basedir=$ENV2DIR
case $secop in
  new )
    newenvdir="${basedir}/${newenv}"
    create_secondary_env $newenvdir $SECSKELDIR $RSYNCSKELDIR
    ;;
  link|copy )
    if [[ -z $oldenv ]]; then
      error_msg "Did not specify link|copy environment name"
    fi
    copy_or_link_env $basedir $newenv $oldenv $secop
    ;;
  * )
    error_msg "Invalid operation, ${secop}, for ${basedir} environment"
    ;;
esac

# Perform Ops on Writable environment
basedir=$ENV3DIR
case $writeop in
  new )
    create_write_env $basedir $newenv
    ;;
  link|copy )
    if [[ -z $oldenv ]]; then
      error_msg "Did not specify link|copy environment name"
    fi
    copy_or_link_env $basedir $newenv $oldenv $writeop
    ;;
  * )
    error_msg "Invalid operation, $writeop, for $basedir environment"
    ;;
esac

echo "Creation completed successfully."
