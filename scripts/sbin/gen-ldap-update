#!/opt/puppetlabs/puppet/bin/ruby
#
# Print out a modify LDIF to set the attributes of the DNs of interest
# to the values found in /etc/openldap/default.ldif.  This output should
# be saved to a file or piped to ldapmodify directly.

default_ldif = '/etc/openldap/default.ldif'

unless File.readable?(default_ldif)
  $stderr.puts("Error: Could not read #{default_ldif}. Unable to proceed.")
  exit(1)
end

# Attempt to discover the base DN from LDAP configuration, but default
# to the domain name of the system if we can't figure it out.

# Try /etc/openldap/ldap.conf first.
base_dn = nil
if File.readable?('/etc/openldap/ldap.conf')
  File.open('/etc/openldap/ldap.conf', 'r').each do |ln|
    if ln =~ %r{^\s*BASE\s+(.*)$}
      base_dn = Regexp.last_match(1).strip
    end
  end
elsif File.readable?('/etc/ldap.conf')
  File.open('/etc/ldap.conf').each do |ln|
    if ln =~ %r{^\s*base\s+(.*)$}
      base_dn = Regexp.last_match(1).strip
    end
  end
else
  require 'socket'

  begin
    # TODO: use facter to get domain
    base_dn = Addrinfo.getaddrinfo(Socket.gethostname, nil, :INET, :STREAM, nil, Socket::AI_CANONNAME)
                      .first
                      .canonname
                      .split('.')[1..-1]
                      .map { |x| "dc=#{x}" }
                      .join(',')
    raise if base_dn.empty?
  rescue StandardError
    $stderr.puts('Error: Could not determine base_dn from hostname.')
    exit(1)
  end
end

# DN's we want to update.
update_dn = [
  "cn=default,ou=pwpolicies,#{base_dn}",
  "cn=noExpire_noLockout,ou=pwpolicies,#{base_dn}",
]

new_entries = {}

current_dn = nil
File.open(default_ldif, 'r').each do |ln|
  if %r{^\s*$}.match?(ln)
    current_dn = nil
  end

  if current_dn.nil?
    update_dn.each do |dn|
      if %r{^dn:\s+#{dn}}.match?(ln)
        current_dn = "dn: #{dn}"
        new_entries[current_dn] = []
      end
    end
  elsif !%r{^objectClass}.match?(ln)
    new_entries[current_dn].push(ln.strip)
  end
end

if new_entries.empty?
  $stderr.puts("Error: #{default_ldif} does not contain DNs to update ('#{update_dn.join('\', \'')}')")
  exit(1)
end

puts "# You probably want to pipe the output of this script into something like the following:
# ldapmodify -H ldap://<your LDAP server> -c -ZZ -M -x -W -D cn=LDAPAdmin,ou=People,#{base_dn}\n\n"

keys = new_entries.keys.sort
keys.each do |key|
  puts key
  puts 'changetype: modify'
  new_entries[key].map! do |x|
    lhs = x.split(' ').first.chop
    rhs = x.split(' ')[1..-1].join(' ')
    "replace: #{lhs}\n#{lhs}: #{rhs}"
  end

  puts new_entries[key].join("\n-\n")
  puts
end
